{
  "array": [
    {
      "type": "Array",
      "title": "In place Transformations",
      "summary": "Perform transformations or reorderings on the array without using extra space.",
      "exampleIntro": "Rotate an array to the right by k steps.",
      "codeExample": "def rotate(nums: List[int], k: int) -> None:\n        n = len(nums)\n        k %= n  # handle cases where k > n\n        \n        def reverse(start: int, end: int) -> None:\n            while start < end:\n                nums[start], nums[end] = nums[end], nums[start]\n                start += 1\n                end -= 1\n\n        reverse(0, n - 1)    # Reverse entire array\n        reverse(0, k - 1)    # Reverse first k elements\n        reverse(k, n - 1)    # Reverse remaining elements",
      "useCaseLink": "/Notes/leetcode-arrays-and-hashing#array-application-in-place-transformations",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ],
  "hashmap": [
    {
      "type": "HashMap",
      "title": "Representations",
      "summary": "Using a HashMap to represent objects or data based on specific criteria.",
      "exampleIntro": "Representing a string by character frequency.",
      "codeExample": "def freqCount():\n        s = \"aabbcc\"\n        freq = {}\n        for char in s:\n            freq[char] = freq.get(char, 0) + 1\n        # freq = {'a': 2, 'b': 2, 'c': 2}",
      "useCaseLink": "/Notes/leetcode-arrays-and-hashing#hashmap-application-representations",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "type": "HashMap",
      "title": "Grouping by Criteria",
      "summary": "Group elements based on a defined criterion, such as sorting or categorization.",
      "exampleIntro": "Grouping strings that are anagrams of each other:",
      "codeExample": "def groupAnagrams(strs):\n        anagrams = {}\n        for word in strs:\n            key = \"\".join(sorted(word))\n            if key not in anagrams:\n                anagrams[key] = []\n            anagrams[key].append(word)\n        # anagrams = {'aet': ['eat', 'tea', 'ate'], 'ant': ['tan', 'nat'], 'abt': ['bat']}",
      "useCaseLink": "/Notes/leetcode-arrays-and-hashing#hashmap-application-grouping-by-criteria",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "type": "HashMap",
      "title": "Memoization in Dynamic Programming",
      "summary": "Store solutions to subproblems in a HashMap to avoid redundant calculations.",
      "exampleIntro": "Fibonacci number computation with memoization:",
      "codeExample": "def fib(n, memo={}):\n        if n <= 1:\n            return n\n        if n not in memo:\n            memo[n] = fib(n - 1, memo) + fib(n - 2, memo)\n        return memo[n]",
      "useCaseLink": "/Notes/leetcode-arrays-and-hashing#hashmap-application-memoization-in-dynamic-programming",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "type": "HashMap",
      "title": "Backtracking with Caching for Pruning",
      "summary": "Use a HashMap to cache explored paths or states to prune the search",
      "exampleIntro": "Subset Sum with caching:",
      "codeExample": "def subsetSum(nums, target):\n        # Cache to store paths that can no longer lead to valid solutions\n        cache = {}\n        result = []\n\n        def backtrack(current, index, total):\n            # Check if we've encountered this path before\n            state = (tuple(current), total)\n            if state in cache:\n                return\n            cache[state] = True\n\n            # Prune: If the total exceeds the target\n            if total > target:\n                return\n            \n            # Valid solution\n            if total == target:\n                result.append(list(current))\n                return\n\n            # Explore further candidates\n            for i in range(index, len(nums)):\n                # Choose\n                current.append(nums[i])\n                # Recurse\n                backtrack(current, i + 1, total + nums[i])\n                # Undo the choice\n                current.pop()\n\n        backtrack([], 0, 0)\n        return result",
      "useCaseLink": "/Notes/leetcode-arrays-and-hashing#hashmap-application-backtracking-with-caching-for-pruning",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "type": "HashMap",
      "title": "Representing Relationships",
      "summary": "Model relationships between entities.",
      "exampleIntro": "Adjacency list representation of a graph:",
      "codeExample": "def graph():\n        edges = [(1, 2), (2, 3), (1, 3)]  # List of edges in the graph\n        graph = {}  # Initialize an empty hashmap to represent the graph\n\n        # Build the adjacency list\n        for u, v in edges:\n            if u not in graph:  # If the node `u` is not yet in the graph, initialize it\n                graph[u] = []\n            if v not in graph:  # If the node `v` is not yet in the graph, initialize it\n                graph[v] = []\n            graph[u].append(v)  # Add `v` to the list of neighbors for `u`\n            graph[v].append(u)  # Add `u` to the list of neighbors for `v`\n\n        # Resulting adjacency list representation\n        # graph = {1: [2, 3], 2: [1, 3], 3: [2, 1]}",
      "useCaseLink": "/Notes/leetcode-arrays-and-hashing#hashmap-application-representing-relationships-",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "type": "HashMap",
      "title": "Logic Mapping",
      "summary": "Use a HashMap to represent problem specific logic or conditions.",
      "exampleIntro": "Map complements to indices for quick lookup:",
      "codeExample": "def twoSum(nums, target):\n        # Map to store complement -> index\n        complement_map = {}\n\n        for i, num in enumerate(nums):\n            complement = target - num\n            \n            # Check if current number is a complement of a previously seen number\n            if num in complement_map:\n                return [complement_map[num], i]\n            \n            # Store complement of current number with index for future lookup\n            complement_map[complement] = i\n\n        return []",
      "useCaseLink": "/Notes/leetcode-arrays-and-hashing#hashmap-application-logic-mapping",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "type": "HashMap",
      "title": "Algorithm",
      "summary": "Case where a problem that seems to require a HashMap is easily solved by",
      "exampleIntro": "Boyer-Moore Voting Algorithm",
      "codeExample": "def majorityElement(nums: List[int]) -> int:\n    candidate = None\n    count = 0\n\n    # Phase 1: Find a candidate for the majority element\n    for num in nums:\n        if count == 0:  # Reset candidate\n            candidate = num\n        count += (1 if num == candidate else -1)\n\n    # Phase 2: Confirm the candidate (optional if majority element is guaranteed)\n    return candidate",
      "useCaseLink": "/Notes/leetcode-arrays-and-hashing#hashmap-application-algorithm",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ],
  "stack": [
    {
      "type": "Stack",
      "title": "Tracking Nested or Hierarchical Structures",
      "summary": "We can track structure while iterating over an object ensuring it maintains",
      "exampleIntro": "Validate if a string containing brackets ()[]{} is properly balanced:",
      "codeExample": "def balancedParentheses(s: str) -> bool:\n        stack = []\n        pairs = {')': '(', ']': '[', '}': '{'}\n        for char in s:\n            if char in pairs.values():\n                stack.append(char)\n            elif char in pairs:\n                if not stack or stack.pop() != pairs[char]:\n                    return False\n        return not stack",
      "useCaseLink": "/Notes/leetcode-stacks#stack-application-tracking-nested-or-hierarchical-structures",
      "blog": "LeetCode: Stacks"
    },
    {
      "type": "Stack",
      "title": "Backtracking by Tracking History or State",
      "summary": "We can use stacks in backtracking to store the state of exploration.",
      "exampleIntro": "Subset Sum with Backtracking",
      "codeExample": "def subset_sum(nums, target):\n        stack = [(0, [], 0)]  # (index, current_subset, current_sum)\n        result = []\n        \n        while stack:\n            index, current_subset, current_sum = stack.pop()\n            \n            if current_sum > target:  # Prune invalid paths\n                continue\n            \n            if current_sum == target:  # Valid solution\n                result.append(list(current_subset))\n                continue\n            \n            # Push new states for further exploration\n            for i in range(index, len(nums)):\n                stack.append((i + 1, current_subset + [nums[i]], current_sum + nums[i]))\n        \n        return result\n\n    # subset_sum([2, 3, 6, 7], 7) = [[7]]",
      "useCaseLink": "/Notes/leetcode-stacks#stack-application-backtracking-by-tracking-history-or-state",
      "blog": "LeetCode: Stacks"
    },
    {
      "type": "Stack",
      "title": "Monotonic Property Maintenance",
      "summary": "A stack can maintain a monotonic property (increasing or decreasing)",
      "exampleIntro": "Find the Next Greater Element",
      "codeExample": "def nextGreaterElement(nums):\n        stack = []  # Stores indices of elements in decreasing order\n        result = [-1] * len(nums)  # Initialize result with -1\n        \n        for i in range(len(nums)):\n            while stack and nums[i] > nums[stack[-1]]:\n                idx = stack.pop()\n                result[idx] = nums[i]  # Found the next greater element\n            stack.append(i)\n        \n        return result\n\n    # Example: nextGreaterElement([2, 1, 2, 4, 3]) -> [4, 2, 4, -1, -1]",
      "useCaseLink": "/Notes/leetcode-stacks#stack-application-monotonic-property-maintenance",
      "blog": "LeetCode: Stacks"
    },
    {
      "type": "Stack",
      "title": "Simulating Recursion or Call Stacks",
      "summary": "We can use a stack to emulate recursion by explicitly managing the call stack.",
      "exampleIntro": "Traverse a binary tree in preorder (root -> left -> right):",
      "codeExample": "def preorderTraversal(root):\n        if not root:\n            return []\n        \n        stack = [root]  # Start with the root node\n        result = []\n        \n        while stack:\n            node = stack.pop()  # Simulate recursion by processing the top of the stack\n            if node:\n                result.append(node.val)  # Visit the node\n                # Push right child first so the left child is processed next\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n        \n        return result\n\n    # Example: For a tree with root → 1, left → 2, right → 3, preorderTraversal(root) -> [1, 2, 3]",
      "useCaseLink": "/Notes/leetcode-stacks#stack-application-simulating-recursion-or-call-stacks",
      "blog": "LeetCode: Stacks"
    },
    {
      "type": "Stack",
      "title": "Expression Evaluation and Parsing",
      "summary": "We can use a stack to evaluate or parse expressions by storing operands",
      "exampleIntro": "Post and Prefix",
      "codeExample": "def evaluatePostfix(expression):\n        stack = []  # To hold operands during evaluation\n        \n        for token in expression.split():\n            if token.isdigit():  # If it's an operand, push it to the stack\n                stack.append(int(token))\n            else:  # If it's an operator, pop two operands and apply the operator\n                b = stack.pop()\n                a = stack.pop()\n                if token == '+':\n                    stack.append(a + b)\n                elif token == '-':\n                    stack.append(a - b)\n                elif token == '*':\n                    stack.append(a * b)\n                elif token == '/':  # Assuming integer division\n                    stack.append(a // b)\n        \n        return stack.pop()  # Final result is the only item left in the stack\n\n    # Example:\n    # Input: \"3 4 + 2 * 1 +\"\n    # Output: 15 (Equivalent to (3 + 4) * 2 + 1)",
      "useCaseLink": "/Notes/leetcode-stacks#stack-application-expression-evaluation-and-parsing",
      "blog": "LeetCode: Stacks"
    },
    {
      "type": "Stack",
      "title": "Dynamic Programming State Compression",
      "summary": "We can use a stack to compress the necessary state while scanning through data,",
      "exampleIntro": "Given an array, partition it into the minimum number of strictly \nincreasing subsequences",
      "codeExample": "def min_partitions(nums):\n        stacks = []  # Each element represents the last number in a subsequence\n        \n        for num in nums:\n            placed = False\n            for i in range(len(stacks)):\n                # If we can append to subsequence i\n                if stacks[i] < num:\n                    stacks[i] = num\n                    placed = True\n                    break\n            if not placed:\n                # Start a new subsequence (partition)\n                stacks.append(num)\n        return len(stacks)\n\n    # Example usage:\n    nums = [1, 3, 2, 4, 6, 5]\n    print(min_partitions(nums))  # Output: 2",
      "useCaseLink": "/Notes/leetcode-stacks#stack-application-dynamic-programming-state-compression",
      "blog": "LeetCode: Stacks"
    },
    {
      "type": "Stack",
      "title": "Interval and Range Processing",
      "summary": "We can use stacks to efficiently process intervals or ranges,",
      "exampleIntro": "Largest Rectangle in Histogram",
      "codeExample": "def largestRectangleArea(heights):\n        stack = []  # stores indices of bars\n        max_area = 0\n        \n        for i, h in enumerate(heights + [0]):  # Add sentinel to flush stack\n            while stack and heights[stack[-1]] > h:\n                height = heights[stack.pop()]\n                left = stack[-1] if stack else -1\n                width = i - left - 1\n                max_area = max(max_area, height * width)\n            stack.append(i)\n        \n        return max_area\n\n    # Example:\n    # Input: [2, 1, 5, 6, 2, 3]\n    # Output: 10  (largest rectangle is formed by heights 5 and 6)",
      "useCaseLink": "/Notes/leetcode-stacks#stack-application-interval-and-range-processing",
      "blog": "LeetCode: Stacks"
    }
  ],
  "two-pointers": [
    {
      "type": "Two Pointers",
      "title": "One Pointer with Auxiliary State",
      "summary": "Use a single pointer to scan linearly and keep track of additional state",
      "exampleIntro": "Move all zeros while maintaining order",
      "codeExample": "def move_zeros(nums: list[int]) -> None:\n        # `last_non_zero_found_at` tracks the position where the next non-zero\n        # element should be placed, simulating a second pointer.\n        last_non_zero_found_at = 0\n\n        for current in range(len(nums)):\n            if nums[current] != 0:\n                nums[last_non_zero_found_at], nums[current] = nums[current], nums[last_non_zero_found_at]\n                last_non_zero_found_at += 1\n\n    # arr = [0, 1, 0, 3, 12] \n    # move_zeros(arr)  Output: [1, 3, 12, 0, 0]",
      "useCaseLink": "/Notes/leetcode-two-pointers#two-pointers-application-one-pointer-with-auxiliary-state",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "type": "Two Pointers",
      "title": "Opposite Ends",
      "summary": "We can have two pointers starting at opposite ends of a list and move them inward",
      "exampleIntro": "Determine if a string is a palindrome",
      "codeExample": "def is_palindrome(s: str) -> bool:\n        left, right = 0, len(s) - 1\n        while left < right:\n            if s[left] != s[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n\n    # Example:\n    print(is_palindrome(\"radar\"))  # Output: True\n    print(is_palindrome(\"hello\"))  # Output: False",
      "useCaseLink": "/Notes/leetcode-two-pointers#two-pointers-application-opposite-ends",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "type": "Two Pointers",
      "title": "Sliding Window",
      "summary": "We can have two pointers represent a window over a sequence that expands or shrinks",
      "exampleIntro": "Find the length of the longest substring without repeating characters.",
      "codeExample": "def longest_unique_substring(s: str) -> int:\n        char_set = set()\n        left = 0\n        maxLength = 0\n\n        for right in range(len(s)):\n            while s[right] in char_set:\n                char_set.remove(s[left])\n                left += 1\n            char_set.add(s[right])\n            maxLength = max(maxLength, right - left + 1)\n        \n        return maxLength\n\n    # Example:\n    print(longest_unique_substring(\"abcabcbb\"))  # Output: 3",
      "useCaseLink": "/Notes/leetcode-two-pointers#two-pointers-application-sliding-window",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "type": "Two Pointers",
      "title": "Fast & Slow Pointers",
      "summary": "We can have have two pointers moving at different speeds to detect cycles or find midpoints",
      "exampleIntro": "Detect a cycle in a linked list.",
      "codeExample": "class ListNode:\n        def __init__(self, value=0, next=None):\n            self.value = value\n            self.next = next\n\n    def has_cycle(head: ListNode) -> bool:\n        slow, fast = head, head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n            if slow == fast:\n                return True\n        return False\n\n    # Example:\n    # Construct a list with a cycle: 1 -> 2 -> 3 -> 4 -> 2 (cycle)\n    node1 = ListNode(1)\n    node2 = ListNode(2)\n    node3 = ListNode(3)\n    node4 = ListNode(4)\n    node1.next = node2\n    node2.next = node3\n    node3.next = node4\n    node4.next = node2\n    print(has_cycle(node1))  # Output: True",
      "useCaseLink": "/Notes/leetcode-two-pointers#two-pointers-application-fast-slow-pointers-",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "type": "Two Pointers",
      "title": "Partitioning",
      "summary": "We can have two pointers in the same array moving inward/outward to rearrange elements",
      "exampleIntro": "Move all zeros in an array to the end while maintaining the order of other elements",
      "codeExample": "def move_zeros(nums):\n        left, right = 0, 0\n        while right < len(nums):\n            if nums[right] != 0:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n            right += 1\n        return nums\n\n    # Example:\n    print(move_zeros([0, 1, 0, 3, 12]))  # Output: [1, 3, 12, 0, 0]",
      "useCaseLink": "/Notes/leetcode-two-pointers#two-pointers-application-partitioning",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "type": "Two Pointers",
      "title": "Parallel Pointer Traversal",
      "summary": "We can have two pointers traversing two separate arrays in parallel to merge, compare,",
      "exampleIntro": "Merge two sorted arrays into one sorted array",
      "codeExample": "def merge_sorted_arrays(arr1, arr2):\n        result = []\n        i, j = 0, 0\n\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                result.append(arr1[i])\n                i += 1\n            else:\n                result.append(arr2[j])\n                j += 1\n        \n        result.extend(arr1[i:])\n        result.extend(arr2[j:])\n        return result\n\n    # Example:\n    print(merge_sorted_arrays([1, 3, 5], [2, 4, 6]))  # Output: [1, 2, 3, 4, 5, 6]",
      "useCaseLink": "/Notes/leetcode-two-pointers#two-pointers-application-parallel-pointer-traversal-",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "type": "Two Pointers",
      "title": "Catchup",
      "summary": "We have two pointers traversing one array. One remains frozen, but catches up",
      "exampleIntro": "Decode Two Pointer Splicing",
      "codeExample": "",
      "useCaseLink": "/Notes/leetcode-two-pointers#two-pointers-application-catchup",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "type": "Two Pointers",
      "title": "K Pointer Variants",
      "summary": "We can extend the two pointer case to track k pointers simultaneously.",
      "exampleIntro": "Given an integer array nums, return all the unique triplets [nums[i], nums[j], nums[k]] that sum to 0.",
      "codeExample": "def threeSum(nums):\n        nums.sort()  # Step 1: Sort the array\n        result = []\n\n        for i in range(len(nums)):\n            # Avoid duplicates for the first element\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n\n            # Two-pointer approach\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                current_sum = nums[i] + nums[left] + nums[right]\n                if current_sum == 0:\n                    result.append([nums[i], nums[left], nums[right]])\n\n                    # Move pointers and avoid duplicates\n                    left += 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    right -= 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n\n                elif current_sum < 0:\n                    left += 1  # Increase sum by moving left pointer rightward\n                else:\n                    right -= 1  # Decrease sum by moving right pointer leftward\n\n        return result\n\n    # Example usage:\n    nums = [-1, 0, 1, 2, -1, -4]\n    print(threeSum(nums))  # Output: [[-1, -1, 2], [-1, 0, 1]]",
      "useCaseLink": "/Notes/leetcode-two-pointers#two-pointers-application-k-pointer-variants-",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "type": "Two Pointers",
      "title": "Algorithm",
      "summary": "Case where a problem that seems to require Two Pointers is easily solved by",
      "exampleIntro": "Manacher's Algorithm, find the longest palindromic substring",
      "codeExample": "def longestPalindrome(s: str) -> str:\n        # Preprocess the string to handle even-length palindromes\n        t = \"#\".join(f\"^{s}$\")\n        n = len(t)\n        p = [0] * n\n        center = right = 0\n\n        \n        for i in range(1, n - 1):\n            mirror = 2 * center - i  # Mirror of `i` with respect to `center`\n\n            # If within bounds of the current right boundary\n            if i < right:\n                p[i] = min(right - i, p[mirror])\n\n            # Expand around `i`\n            while t[i + p[i] + 1] == t[i - p[i] - 1]:\n                p[i] += 1\n\n            # Update the center and right boundary if the palindrome is expanded\n            if i + p[i] > right:\n                center = i\n                right = i + p[i]\n\n        # Find the maximum length palindrome\n        maxLen, centerIndex = max((n, i) for i, n in enumerate(p))\n        start = (centerIndex - maxLen) // 2  # Convert index back to original string\n        return s[start: start + maxLen]",
      "useCaseLink": "/Notes/leetcode-two-pointers#two-pointers-application-algorithm",
      "blog": "LeetCode: Two Pointers"
    }
  ],
  "binary-search": [
    {
      "type": "Binary Search",
      "title": "Target Binary Search",
      "summary": "Using Binary Search to locate the position of a target element",
      "exampleIntro": "Searching for a target number in a sorted array.",
      "codeExample": "def binary_search(nums, target):\n        left, right = 0, len(nums) - 1\n\n        # Note 1:\n        # Target Binary Search: uses '<='\n        while left <= right:\n            mid = (left + right) // 2\n\n            # Note 2:\n            # 3 parts during iteration\n            # target check, remove left half, remove right half\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        # Note 3:\n        # Exit: left > right triggers ends\n        # Return value if not found\n        return -1",
      "useCaseLink": "/Notes/leetcode-binary-search#binary-search-application-target-binary-search",
      "blog": "LeetCode: Binary Search"
    },
    {
      "type": "Binary Search",
      "title": "Multiple Layers Binary Search",
      "summary": "Applying binary search in multiple stages or layers, typically to",
      "exampleIntro": "Searching for a target in a sorted 2D matrix",
      "codeExample": "def find_min_valid_value():\n        left, right = 0, N-1\n\n        # Note 1:\n        # Optimization Binary Search: uses '<'\n        while left < right:\n            mid = (left + right) // 2\n\n            # Note 2:\n            # Check if condition is satisfied\n            # If so, include mid with left or right half\n            if condition(mid):\n                # or left = mid, depending on which half we are checking\n                right = mid      \n            else:\n                # or right = mid + 1, depending on which half we are removing\n                left = mid + 1 \n\n        # Note: 3\n        # Exit: left == right, triggers the exit\n        # we have found the optimized solution\n\n        # or right\n        return left",
      "useCaseLink": "/Notes/leetcode-binary-search#binary-search-application-multiple-layers-binary-search",
      "blog": "LeetCode: Binary Search"
    },
    {
      "type": "Binary Search",
      "title": "Optimization Search Min Max Binary Search",
      "summary": "Using binary search to find the smallest or largest valid value",
      "exampleIntro": "Find the minimum eating speed to finish all bananas within h hours",
      "codeExample": "def find_ceiling(nums, target):\n        left, right = 0, len(nums)\n\n        # Loop condition: left < right\n        while left < right:\n            mid = (left + right) // 2\n            \n            # If mid element is less than target,\n            # the ceiling must be to the right of mid (exclude mid)\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                # nums[mid] >= target, potential ceiling candidate\n                # Keep mid in search space by moving right boundary to mid\n                right = mid\n        \n        # At the end, left == right, points to the smallest element >= target if exists\n        # If left == len(nums), no ceiling found\n        if left == len(nums):\n            return None\n        return nums[left]",
      "useCaseLink": "/Notes/leetcode-binary-search#binary-search-application-optimization-search-min-max-binary-search-",
      "blog": "LeetCode: Binary Search"
    },
    {
      "type": "Binary Search",
      "title": "Condition Adapted Binary Search",
      "summary": "Adapting search conditions of binary search to account for special",
      "exampleIntro": "Finding the minimum element in a rotated sorted array",
      "codeExample": "def find_floor_wrong(nums, target):\n    left, right = 0, len(nums)\n\n    # Loop condition: left < right\n    while left < right:\n        mid = (left + right) // 2\n\n        # Attempt: \n        # mid element <= target:\n        # move left boundary up to mid (include mid)\n        if nums[mid] <= target:\n            \n            # PROBLEM: \n            # left might not move forward when left == mid, causing infinite loop\n            left = mid \n            \n        else:\n            # mid element > target:\n            # move right boundary down (exclude mid)\n            right = mid\n\n    # When loop ends, left == right, but it may not point to floor directly\n    # Without shifting left or checking bounds, this is unreliable\n    if left == 0 and nums[left] > target:\n        return None\n    return nums[left]",
      "useCaseLink": "/Notes/leetcode-binary-search#binary-search-application-condition-adapted-binary-search",
      "blog": "LeetCode: Binary Search"
    },
    {
      "type": "Binary Search",
      "title": "Upper Ceiling or Lower Floor Trick Based on Target Binary Search",
      "summary": "Binary search cannot directly find the largest element less than or equal to a target",
      "exampleIntro": "Find the first element less than or equal to target",
      "codeExample": "if condition(mid):\n        right = mid        # mid might be the answer, keep it\n    else:\n        left = mid + 1     # mid is invalid, discard it",
      "useCaseLink": "/Notes/leetcode-binary-search#binary-search-application-upper-ceiling-or-lower-floor-trick-based-on-target-binary-search",
      "blog": "LeetCode: Binary Search"
    },
    {
      "type": "Binary Search",
      "title": "Fixed Size Window",
      "summary": "Fixed size windows help maintain a constant window of k elements",
      "exampleIntro": "Maximum sum of any subarray of size k",
      "codeExample": "def maxSumSubarray(nums, k):\n        window_sum = sum(nums[:k])\n        max_sum = window_sum\n        \n        for i in range(k, len(nums)):\n            window_sum += nums[i] - nums[i - k]\n            max_sum = max(max_sum, window_sum)\n        \n        return max_sum\n\n    # maxSumSubarray([1, 4, 2, 10, 2, 3, 1, 0, 20], 4) = 24",
      "useCaseLink": "/Notes/leetcode-sliding-window#binary-search-application-fixed-size-window",
      "blog": "LeetCode: Sliding Window"
    }
  ],
  "sliding-window": [
    {
      "type": "Sliding Window",
      "title": "Variable Size Window",
      "summary": "Variable size windows expand and shrink dynamically depending on",
      "exampleIntro": "Longest substring without repeating characters",
      "codeExample": "def lengthOfLongestSubstring(s: str) -> int:\n        char_index = {}\n        left = max_len = 0\n        \n        for right in range(len(s)):\n            if s[right] in char_index and char_index[s[right]] >= left:\n                left = char_index[s[right]] + 1\n            \n            char_index[s[right]] = right\n            max_len = max(max_len, right - left + 1)\n        \n        return max_len\n\n    # \"abcabcbb\" → lengthOfLongestSubstring = 3",
      "useCaseLink": "/Notes/leetcode-sliding-window#sliding-window-application-variable-size-window",
      "blog": "LeetCode: Sliding Window"
    }
  ],
  "linked-list": [
    {
      "type": "Linked List",
      "title": "Linear Traversal",
      "summary": "We can traverse a linked list node by node using a single pointer.",
      "exampleIntro": "Count number of nodes in the list",
      "codeExample": "def countNodes(head):\n        count = 0\n        curr = head\n        \n        while curr: \n            count += 1\n            curr = curr.next\n\n        return count",
      "useCaseLink": "/Notes/leetcode-linked-list#linked-list-application-linear-traversal",
      "blog": "LeetCode: Linked List"
    },
    {
      "type": "Linked List",
      "title": "Dummy Head Trick",
      "summary": "Using a dummy (sentinel) node simplifies edge cases in linked list operations,",
      "exampleIntro": "Remove nth node from end of a list using dummy head",
      "codeExample": "def removeNthFromEnd(head: Optional[ListNode], n: int) -> Optional[ListNode]:\n    \n    # dummy (sentinel) node used to point to the head\n    dummy = ListNode(0, head)\n    fast = slow = dummy\n\n    # Move fast pointer n+1 steps ahead to keep gap\n    for _ in range(n + 1):\n        fast = fast.next\n\n    # Move both pointers until fast reaches end\n    while fast:\n        fast = fast.next\n        slow = slow.next\n\n    # Remove the nth node (slow.next)\n    slow.next = slow.next.next\n\n    # Return head dummy is pointing to (may be different from original)\n    return dummy.next",
      "useCaseLink": "/Notes/leetcode-linked-list#linked-list-application-dummy-head-trick",
      "blog": "LeetCode: Linked List"
    },
    {
      "type": "Linked List",
      "title": "Tortoise and Hare",
      "summary": "We can represent fast and slow pointers to traverse the list.",
      "exampleIntro": "Return middle node in list",
      "codeExample": "def findMiddle(head):\n        slow = fast = head\n\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n\n        return slow",
      "useCaseLink": "/Notes/leetcode-linked-list#linked-list-application-tortoise-and-hare",
      "blog": "LeetCode: Linked List"
    },
    {
      "type": "Linked List",
      "title": "In Place Modification",
      "summary": "Iteratively manipulate linked list during traversal for",
      "exampleIntro": "Reverse the entire list and return a new head",
      "codeExample": "def reverseList(head):\n        prev = None\n        curr = head\n\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n\n        return prev",
      "useCaseLink": "/Notes/leetcode-linked-list#linked-list-application-in-place-modification",
      "blog": "LeetCode: Linked List"
    }
  ]
}