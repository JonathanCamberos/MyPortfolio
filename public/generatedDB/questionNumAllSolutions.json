{
  "1": [
    {
      "number": 1,
      "name": "Hashmap",
      "type": "hashmap",
      "application": "logic-mapping",
      "code": "def twoSum(self, nums: List[int], target: int) -> List[int]:\n        \n        # map of {complement: index, complement: index...}\n        # space complexity: hashmap of list of n length  O(n)\n        tracking = {}\n \n        # time complexity: iterating over list of size n O(n)\n        for i in range (len(nums)):\n\n            # grab curr complement -> (target = nums[i] + complement) \n            # time complexity: subtraction O(1) \n            complement = target - nums[i]\n\n            # time complexity: lookup operation O(1)\n            if complement in tracking:\n                \n                # [curr_index, complement_index]\n                return [i, tracking[complement]]\n    \n            # if miss, track currElement as potential complement\n            # time complexity: insert operation O(1)\n            tracking[nums[i]] = i\n\n        # overall: time complexity  O(n) \n        # overall: space complexity O(n)\n        return []",
      "questionNumber": 1,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-1-hashmap---hashmaplogic-mapping",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ],
  "5": [
    {
      "number": 1,
      "name": "Manacher's Algorithm (iterate, mirror radius optimization, and expand)",
      "type": "two-pointers",
      "application": "algorithm",
      "code": "def longestPalindrome(self, s: str) -> str:\n\n        # Note: \n        # Preprocessing with #, ^, and $:\n        # '#': ensures uniform expansion, for both odd and even length palindromes\n        # '^' and '$': sentinel characters don't match valid input characters, serve as true start and end markers\n        # '#': ensures all palindromes start and end with '#'\n        # '#': occur on odd indexes\n\n        # Mapping:\n        # we can map odd '#' indexes to their even character:\n        # mapping '#' at index 1 to char pair 'a' at index 2, to original 'a' at index 0\n        # [ ^ # a # b # a # $ ] -> [ a b a ]    via : originalStart = (expandedCenter - radius) / 2\n        #   0 1 2 3 4 5 6 7 8        0 1 2      thus: originalStart = (4 - 3) / 2 = 0\n        \n        # Boundary expansion: \n        # For any index i, center of palindrome at i can either be: \n        # - character from the original string\n        # - placeholder '#'\n        # Center definition allows even length palindromes such as \"abba\", see below,\n        # to have a single middle point, allowing the same expanding logic \n        # for even and odd strings for palindrome validation\n\n        # Ex:\n        # ^ # a # b # b # a # $    || new string len 11,\n        # 0 1 2 3 4 5 6 7 8 9 10   ||\n        #           ^              || index 5 center for even length \"abba\"\n\n        # index 1 palindrome: \"#\"\n        # index 2 palindrome: \"#a#\"\n        # index 5 palindrome: \"#a#b#b#a#\"\n        # etc...\n\n        expandedStr = \"#\".join(f\"^{s}$\")\n        n = len(expandedStr)\n\n        # Right Most Palindrome and Mirror Trick: \n        # Iteration tracks the right boundary for the current farthest right palindromic substring, \n        # which allows us to take advantage of the mirror radius trick.\n        # It speeds up palindrome expansion by starting the current palindrome radius\n        # at the radius value of its mirror\n\n        # p[i]: radius of palindrome centered at some index i\n        p = [0] * n\n\n        # mirror radius validation: tracking right boundary\n        # right: right boundary of the current right most palindrome\n        right = 0\n\n        # mirror radius validation: tracking center of right most in order to calculate mirror index\n        # center: center index of the current right most palindrome\n        center = 0 \n\n        # iteration range ignores sentinel indexes 0 and (n-1): ^ and $\n        # i: center of current palindrome\n        # time complexity: iterate over list of n length O(n)\n        for i in range(1, n - 1):\n\n            # mirror:\n            # i is current index being processed\n            # i is to the right of center and has a mirror to the left of center\n            # ex: center = 6, i = 7 => mirror = (2 * 6) - 7 = 5\n            mirror = (2 * center) - i \n\n            # mirror radius validation:\n            # if i lies within bounds of the right most palindrome,\n            # the right most palindrome symmetry guarantees that the palindrome radius\n            # for the mirror of i, is applicable to i as well,\n            # while within the bounds of the right most palindrome\n            if i < right:\n\n                # mirror radius is either:\n                # - less than the distance between i and right bound,\n                #   in which case all of the radius is valid\n                # - exceeds bounds and is farther than right bound,\n                #   in which case only the radius up until the right bound is valid\n                \n                # i radius is thus, bounded by minimum between: \n                # - mirror radius\n                # - distance from i to the right bound\n                p[i] = min(right - i, p[mirror])\n\n            # assumption: if valid mirror, we pre-set p[i] to p[mirror]\n            # now expand: expand radius p[i] until palindromic status is broken\n            while expandedStr[i + p[i] + 1] == expandedStr[i - p[i] - 1]:\n                p[i] += 1\n\n            # p[i]: radius for palindrome at i\n            # i: center for palindrome at i\n            # check: if we have a new right most boundary, update center and right \n            if i + p[i] > right:\n                right = i + p[i]\n                center = i\n\n        # expandedStr iteration complete:\n        # p[] stores radius of palindrome centered at each index\n\n        # scan p[] grabbing max palindrome radius alongside its center\n        maxRadius, centerIndex = max((palindromeRadius, i) for (i, palindromeRadius) in enumerate(p))\n\n        # Note:\n        # index and radius are relative to expandedStr, not the original string\n        # thus, we need to translate to original string indexes\n\n        # Notice, how in the expanded string, \n        #  - all original characters are on even index\n        #  - all original characters have matching # on the left odd index\n\n        # abba =>  ^ # a # b # b # a # $   | a=2, b=4, b=6, a=8\n        # 0123 =>  0 1 2 3 4 5 6 7 8 9 10  | #=1, #=3, #=5, #=7\n\n        # aba =>   ^ # a # b # a # $       | a=2, b=4, a=6\n        # 012 =>   0 1 2 3 4 5 6 7 8       | #=1, #=3, #=5\n\n        # any palindrome will always end with a '#'.\n        # so if we divide the starting odd position by 2, it will always map\n        # to an original character.\n        # so an easy translation formula is:\n\n        start = (centerIndex - maxRadius) // 2\n        \n        # splice longest substring\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(n)\n        return s[start: start + maxRadius]",
      "questionNumber": 5,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-1-manacher-s-algorithm-iterate-mirror-radius-optimization-and-expand---two-pointersalgorithm",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "number": 2,
      "name": "Expand Around Center checking for Odd and Even palindromes (constant space)",
      "type": "two-pointers",
      "application": "algorithm",
      "code": "def longestPalindrome(self, s: str) -> str:\n\n        # expand from a given left and right while \n        # maintaining palindrome property\n        def expandAroundCenter(left, right):\n            while left >= 0 and right < n and s[left] == s[right]:\n                left -= 1\n                right += 1\n\n            # curr iteration is not valid:\n            # ignore left: incrementing index\n            # ignore right: noninclusive right slicing\n            return s[left+1:right] \n         \n        n = len(s)\n        maxPalindrome = \"\"\n\n        # time complexity: iterate over list of n length O(n)\n        for i in range(n):\n            # odd expansion, centered at i\n            oddPalindrome = expandAroundCenter(i, i)      \n            # even expansion, centered at i and i + 1\n            evenPalindrome = expandAroundCenter(i, i+1)\n\n            # update longest\n            if len(oddPalindrome) > len(maxPalindrome):\n                maxPalindrome = oddPalindrome\n            if len(evenPalindrome) > len(maxPalindrome):\n                maxPalindrome = evenPalindrome\n\n        # overall: time complexity O(n^2)\n        # overall: space complexity O(1)\n        return maxPalindrome",
      "questionNumber": 5,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-2-expand-around-center-checking-for-odd-and-even-palindromes-constant-space---two-pointersalgorithm",
      "blog": "LeetCode: Two Pointers"
    }
  ],
  "11": [
    {
      "number": 1,
      "name": "Greedy Opposite Ends Pointer Shift by BinarySearch Modification",
      "type": "two-pointers",
      "application": "opposite-ends",
      "code": "def maxArea(self, height: List[int]) -> int:\n        \n        # set up \"BinarySearch\" modification\n        left, right = 0, len(height)-1\n        maxWater = 0 \n\n        # time complexity: two pointer iteration over list of n length O(n)\n        while left < right:\n\n            # grab smaller height between outside pointers\n            smallerHeight = min(height[left], height[right])\n\n            # width includes walls: \n            # [1, 1] is 1 water, so (rightIndex - leftIndex) = width\n            # calculate curr water between outside pointers, (smallerHeight * width)\n            currWater = smallerHeight * (right-left)\n            \n            # compare to global max\n            maxWater = max(maxWater, currWater)\n\n            # Greedy:\n            # As we move pointers inwards, width is guaranteed to get shrink\n            # Thus, we can continue to move our pointers,\n            # until we hit a bigger height than our current smaller height\n            # time complexity: two pointer iteration over list of n length O(n)\n            if height[left] < height[right]:\n                # step past current left/right wall combination\n                left += 1\n                # Greedy:\n                while left < right and height[left] < smallerHeight:\n                    left += 1 \n            else:\n                # step past current left/right wall combination\n                right -= 1\n                # Greedy:\n                while left < right and height[right] < smallerHeight:\n                    right -= 1\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(1)\n        return maxWater",
      "questionNumber": 11,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-1-greedy-opposite-ends-pointer-shift-by-binarysearch-modification---two-pointersopposite-ends",
      "blog": "LeetCode: Two Pointers"
    }
  ],
  "15": [
    {
      "number": 1,
      "name": "Mimicking Two Sum by doing Per Element Opposite Ends Pointer Shift by BinarySearch Modification for 0 (Sorting)",
      "type": "two-pointers",
      "application": "k-pointer-variants",
      "code": "def threeSum(self, nums: List[int]) -> List[List[int]]:\n\n        # Note: Two Sum vs 3Sum\n        # Two sum, finding two numbers whose sum equals a target is simple\n        # with hashmaps or two pointer solutions being efficient\n        # 3Sum adds complexity with a third variable,\n        # but converting 3Sum into a two sum problem allows\n        # the use of hashmap or two pointer solutions again\n\n        # set ensures no duplicate triplets\n        # space complexity: \n        results = set()\n        n = len(nums)\n\n        # time complexity: default python sorting TimSort, O(n log n)\n        nums.sort()\n\n        # mimic \n        # time complexity\n        for i in range(n - 2):\n\n            # skip iteration:\n            # i should only \"BinarySearch\" through any number once \n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n\n            # early break: \n            # only allow negative numbers for i in (i, j, k)\n            if nums[i] > 0:\n                break\n\n            # Set up \"BinarySearch\" modification:          \n            # set new left boundary for iteration BinarySearch\n            # reset right boundary for iteration BinarySearch  \n            left, right = i + 1, n - 1\n\n            # \"BinarySearch\" modification: \n            # \"<\": working within subarray separate from i\n            # cannot evaluate num at left == right given constraint i != j, i != k, j != k\n            # Base case: no more array remaining to search\n            # complement for numbers[i] was not found, \n            # continue iteration for i\n            # time complexity: BinarySearch on subarray of n elements O(log n) for n iterations, leading to O(n log n)\n            while left < right:\n                \n                # grab current sum (i, j, k)\n                currSum = nums[i] + nums[left] + nums[right]\n\n                # found target sum\n                if currSum == 0:\n                    \n                    # add triplet to result set\n                    results.add((nums[i], nums[left], nums[right]))\n\n                    # skip iteration:\n                    # j and k should only \"BinarySearch\" through any number once \n                    left += 1\n                    right -= 1\n\n                    # skip iteration:\n                    # j and k should only \"BinarySearch\" through any number once \n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n\n                # \"BinarySearch\" on relevant subsection\n                # update left or right pointer\n                elif currSum < 0:\n                    left += 1\n                else:\n                    right -= 1\n\n        # convert valid set of tuple triplets into valid list of tuple triplets\n\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        return list(results)",
      "questionNumber": 15,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-1-mimicking-two-sum-by-doing-per-element-opposite-ends-pointer-shift-by-binarysearch-modification-for-0-sorting---two-pointersk-pointer-variants",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "number": 2,
      "name": "Grouping By Parity 4 Triplet Combinations (No Sorting)",
      "type": "two-pointers",
      "application": "algorithm",
      "code": "def threeSum(self, nums: List[int]) -> List[List[int]]:\n        \n        # Note: Two Sum vs 3Sum\n        # Two sum, finding two numbers whose sum equals a target is simple\n        # with hashmaps or two pointer approaches being efficient\n        # 3Sum adds complexity with a third variable.\n        # Grouping techniques aim to narrow and organize the solution space\n        # reducing redundant checks while finding valid triplets\n\n        # positive, negative, and zero sets\n        # space complexity: \n        p, n, z = [], [], []\n        \n        # set ensures no duplicate triplets\n        # space complexity: \n        res = set()\n\n        # time complexity: iterate over list of n length O(n)\n        for i in nums:\n            if i < 0:\n                n.append(i)\n            elif i > 0:\n                p.append(i)\n            else:\n                z.append(i)\n\n        # sets for unique groups\n        # time complexity: convert list into set O(n)\n        P, N = set(p), set(n)\n\n        # (0, num, -num)\n        # time complexity: iterate over positive numbers list n length O(n)\n        if len(z) > 0:\n            for i in P:                \n                # time complexity: negative target lookup in constant O(1)\n                nTarget = -i\n                if nTarget in N:\n                    res.add((nTarget, 0, i ))\n\n        # (0, 0, 0)\n        # time complexity: len operation constant O(1)\n        if len(z) >= 3:\n            res.add((0, 0, 0))\n\n        # (-, -, +) negative pairs\n        # time complexity: iterate over list of negative numbers n length O(n)\n        for i in range(len(n)):\n            # time complexity: iterate over list of negative numbers n length O(n) per outer iteration O(n), leading to O(n^2)\n            for j in range(i+1, len(n)):\n                # time complexity: lookup operation constant O(1)\n                pTarget = -(n[i] + n[j])\n                if pTarget in P:\n                    res.add(tuple(sorted([n[i], n[j], pTarget])))\n        \n        # (-, +, +) positive pairs\n        # time complexity: iterate over list of positive numbers n length O(n)\n        for i in range(len(p)):\n            # time complexity: iterate over list of positive numbers n length O(n) per outer iteration O(n), leading to O(n^2)\n            for j in range(i+1, len(p)):\n                # time complexity: lookup operation constant O(1)\n                nTarget = -(p[i] + p[j])\n                if nTarget in n:\n                    res.add(tuple(sorted([p[i], p[j], nTarget])))\n\n        # convert valid set of tuple triplets into valid list of tuple triplets\n\n        # overall: time complexity O(n^2) \n        # overall: space complexity O(n)\n        return list(res)",
      "questionNumber": 15,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-2-grouping-by-parity-4-triplet-combinations-no-sorting---two-pointersalgorithm",
      "blog": "LeetCode: Two Pointers"
    }
  ],
  "36": [
    {
      "number": 1,
      "name": "Defaultdict Matrix",
      "type": "hashmap",
      "application": "representation",
      "code": "def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \n        # space complexity: hashsets for rows, columns, and flattened boxes of n length O(n) = O(3n)\n        cols = defaultdict(set)\n        rows = defaultdict(set)\n        grids = defaultdict(set)\n\n        # time complexity: iterating over all cells (r * c) O(n^2)\n        for r in range(9):\n            for c in range(9):\n                \n                tmp = board[r][c]\n                if tmp != \".\":\n\n                    # indexing box sets by tuple key (r/3, c/3)\n                    gridTuple = (r // 3, c // 3)\n\n                    # time complexity: lookup operation for element to corresponding sets in constant O(1)\n                    if (tmp in rows[r] or \n                        tmp in cols[c] or \n                        tmp in grids[gridTuple] ):\n                        return False\n                    \n                    # time complexity: insert operation for new element to corresponding sets in constant O(1)\n                    cols[c].add(tmp)\n                    rows[r].add(tmp)\n                    grids[gridTuple].add(tmp)\n\n        # overall: time complexity O(n^2)\n        # overall: space complexity O(n)\n        return True",
      "questionNumber": 36,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-1-defaultdict-matrix---hashmaprepresentation",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 2,
      "name": "[[]] Matrix",
      "type": "hashmap",
      "application": "representation",
      "code": "def isValidSudoku(self, board: List[List[str]]) -> bool:\n        \n        # space complexity: hashsets for rows, columns, and flattened boxes of n length O(n) = O(3n)\n        rows = [[], [], [], [], [], [], [], [], []]\n        col = [[], [], [], [], [], [], [], [], []]\n        grids = [[], [], [], [], [], [], [], [], []]\n\n        # time complexity: iterating over all cells (r * c) O(n^2)\n        for r in range(9):\n            for c in range(9):\n                \n                tmp = board[r][c]\n                if tmp != \".\":  \n\n                    # indexing box sets by unique int calculation \n                    #  (j//3) = 0, 1, 2\n                    #  (3 * (i//3)) = 0, 3, 6\n                    #    0 1 2\n                    # 0  0 1 2\n                    # 3  3 4 5\n                    # 6  6 7 8\n                    # leads to 0-8 index indexing\n                    gridKey = (3 * (i//3)) + (j//3)\n\n                    # time complexity: lookup operation for element to corresponding sets in constant O(1)\n                    if (tmp in rows[r] or \n                        tmp in col[c]  or \n                        tmp in grids[gridKey]):\n                        return False\n\n                    # space complexity: lookup operation for new element to corresponding sets in constant O(1)\n                    col[c].append(tmp)\n                    rows[r].append(tmp)\n                    grids[gridKey].append(tmp)\n        \n        # overall: time complexity O(n^2)\n        # overall: space complexity  O(n)\n        return True",
      "questionNumber": 36,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-2-matrix---hashmaprepresentation",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ],
  "42": [
    {
      "number": 1,
      "name": "Monotonic Traversal 2 Outer/2 Inner Pointers Creating Bounds Opposite Ends Pointer Shift by BinarySearch Modification (Sorting)",
      "type": "two-pointers",
      "application": "k-pointer-variants",
      "code": "def trap(self, height: List[int]) -> int:\n\n        # Note: \n        # Outer Pointers: act as wall/side to bound inner pointers\n        # Inner Pointers: traverse inward from both ends to track height for current position\n        # Water Trapping: compare inner pointer to outer pointers wall/side to determine \n        # if theres enough depth to trap water\n\n        # Set up \"BinarySearch\" modification\n        # outer pointers\n        outerLeftMax, outerRightMax = 0, 0\n        # inner pointers\n        left, right = 0, len(height) - 1\n        water = 0\n\n        # Monotonic \"BinarySearch\" modification\n        # time complexity: two pointer iteration over list of n length O(n)\n        while left < right:\n\n            # Monotonic \"BinarySearch\" on relevant subsection\n            # implies: height[left] < height[right]\n            # case 1: [5, 0, 3, 2, 4, 6], left < right for entire array \n            # case 2: [5, 0, 3, 9, 4, 6], left < right broken at some point\n            # case 1 implies: while height[left] < height[right] \n            # and while height[left] < outerLeftMax\n            # then: water is limited by outerLeft/outerRight \n            # as water will eventually be caught by right\n            if height[left] < height[right]:\n\n                # case 1: implication broken\n                # implies: outerLeftMax < height[left] < height[right] \n                # then: update outerLeftMax             \n                if height[left] >= outerLeftMax:\n                    outerLeftMax = height[left]\n\n                # case 1: implication applies\n                # implies: height[left] < outerLeftMax < height[right]\n                else:\n                    water += outerLeftMax - height[left]\n\n                # shift pointer\n                left += 1\n\n            # implies: height[right] < height[left]\n            else:\n                \n                # case 1: implication broken\n                # implies: outerRightMax < height[right] < height[left]     \n                # then: update outerRightMax\n                if height[right] >= outerRightMax:\n                    outerRightMax = height[right]\n\n                # case 1: implication applies\n                # implies: height[right] < outerRightMax < height[left]\n                else:\n                    water += outerRightMax - height[right]\n\n                # shift pointer\n                right -= 1\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(1)\n        return water",
      "questionNumber": 42,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-1-monotonic-traversal-2-outer-2-inner-pointers-creating-bounds-opposite-ends-pointer-shift-by-binarysearch-modification-sorting---two-pointersk-pointer-variants",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "number": 2,
      "name": "Monotonic Stack",
      "type": "two-pointers",
      "application": "algorithm",
      "code": "def trap(self, height: List[int]) -> int:\n\n        # Note: 2 concepts here: \n        # Monotonic Stack: A stack that maintains non-increasing heights \n        # When non-increasing breaks: curr height will serve as right wall,\n        # top of stack will serve as depth, and top of stack - 1 will serve as left wall\n\n        # Monotonic stack to store indices\n        stack = []  \n        water = 0\n\n        # push and pop each bar at most once\n        # time complexity: iterate over list of n length O(n)\n        for i in range(len(height)):\n\n            # Check: stack is non empty, depth candidate exists\n            # Check: if current height[i] breaks non-increasing order,\n            # will be viable to act as a right wall\n            # implies: we keep appending while monotonic non-increasing stays valid\n            # implies: stack is kept in monotonic non-increasing order\n            # implies: when monotonic non-increasing breaks, we have found right wall\n            while stack and height[i] > height[stack[-1]]:\n                \n                # curr while loop iteration:\n                # height[i]: right wall\n                # pop stack[-1]: depth candidate\n                # peak stack[-2]: left wall\n\n                # while stack is non-empty:\n                # stack.pop() will iterate depth candidate and left wall\n                # essentially dragging the right wall over the monotonic stack, \n                # adding all possible water, with all combinations of left wall and depth candidate\n                # until a depth candidate is taller than the current right wall\n                # then we just add the right wall to the stack maintaining monotonic order\n                depthCandidateIndex = stack.pop() \n\n                # Check: if stack empty after pop, no left wall exists\n                # implies: cannot trap water, end while loop, add item to stack\n                if not stack:\n                    break\n\n                # trapped water involves the space between two walls, excluding walls\n                # width = (right - left - 1)\n\n                # After stack.pop():\n                # height[i]: right wall\n                # popped depthCandidate: depth\n                # peak stack[-1]: left wall\n                # while loop check implies: depthCandidate < height[i]\n                # monotonic stack check implies: depthCandidate < stack[-1]\n                rightWallIndex = i\n                leftWallIndex = stack[-1]\n                distance = rightWallIndex - leftWallIndex - 1\n\n                rightHeight = height[rightWallIndex]\n                depthHeight = height[depthCandidateIndex]\n                leftHeight = height[leftWallIndex]\n\n                # subtract the depth minus smaller height to get water depth\n                boundedHeight = min(rightHeight, leftHeight) - depthHeight\n\n                # add the trapped water for the current segment \n                # [5, 0, 0, 2]\n                # in this case, (0, 0, 2)\n                # would return with the left wall being 0\n                # so no water captured\n                # but then, (5, 0, 2)\n                # would return with the right wall being 5\n                # in which case we would need the distance.\n                \n                # so distance will always be 1\n                # unless we have a run of identical heights\n                water += distance * boundedHeight\n\n            # implies: monotonic non-increasing is still valid\n            # implies: append height to stack\n            stack.append(i)\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(n) (due to the stack)\n        return water",
      "questionNumber": 42,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-2-monotonic-stack---two-pointersalgorithm",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "number": 3,
      "name": "Dynamic Programming",
      "type": "two-pointers",
      "application": "algorithm",
      "code": "def trap(self, height: List[int]) -> int:\n        \n        # Note:\n        # Dynamic Programming Concept:\n        # Left Maximum Array: Stores the maximum height encountered from the start up to each index i.\n        # Right Maximum Array: Stores the maximum height encountered from the end up to each index i.\n        # Avoid recomputing maximum heights repeatedly.\n\n        n = len(height)\n        if n == 0:\n            return 0\n\n        # Arrays to store max heights from the left and right\n        # leftMax[i]: Maximum height from 0 to index i\n        # rightMax[i]: Maximum height from index i to (n-1)\n        leftMax = [0] * n\n        rightMax = [0] * n\n        water = 0\n\n        # calculate left max for each bar\n        # compare previous max, with current bar height,\n        # as curr may be new max, for the curr index\n        # time complexity: iterate over list of n length O(n)\n        leftMax[0] = height[0]\n        for i in range(1, n):\n            leftMax[i] = max(leftMax[i - 1], height[i])\n\n        # calculate right max for each bar\n        # compare previous max, with current bar height,\n        # as curr may be new max, for the curr index\n        # time complexity: iterate over list of n length O(n)\n        rightMax[n - 1] = height[n - 1]\n        for i in range(n - 2, -1, -1):\n            rightMax[i] = max(rightMax[i + 1], height[i])\n\n        # calculate trapped water for each bar\n        # time complexity: iterate over list of n length O(n)\n        for i in range(n):\n\n            # The water trapped above bar i is determined by the minimum between\n            # leftMax[i] and rightMax[i] minus the curr bar height\n            water += min(leftMax[i], rightMax[i]) - height[i]\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(n)\n        return water",
      "questionNumber": 42,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-3-dynamic-programming---two-pointersalgorithm",
      "blog": "LeetCode: Two Pointers"
    }
  ],
  "49": [
    {
      "number": 1,
      "name": "Array of 26 to Tuple Key",
      "type": "hashmap",
      "application": "grouping-by-criteria",
      "code": "def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        \n        # Note: Tuples in python are immutable which makes them suitable as keys for a hashmaps\n        # Lists are mutable and as such not hashable for hashmaps\n        # You should use tuples where the position carries semantic meaning. \n\n        # [26 char count tuple key -> [anagram group list], ...]\n        \n        # space complexity: stores unique m tuple keys O(m) and lists of k strings O(k), O(m * k)\n        anaGroup = {}\n\n        # time complexity: iterating over all strings O(n) \n        for word in strs:\n            \n            # space complexity: fixed-sized array for 26 lowercase letters O(1)\n            charCount = [0] * 26  \n            \n            # time complexity: counting chars in string of k length O(k)\n            for char in word:\n                charCount[ord(char) - ord('a')] += 1\n            \n            # space complexity: fixed-size tuple of length 26 O(1)\n            key = tuple(charCount)  \n            \n            # time complexity: lookup operation of O(1) \n            if key not in anaGroup:\n                anaGroup[key] = []  \n\n            # time complexity: append operation to list O(1)\n            anaGroup[key].append(word)  \n\n\n        # overall: time complexity  O(n * k)  \n        # overall: space complexity O(m * k)\n        return list(anaGroup.values())",
      "questionNumber": 49,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-1-array-of-26-to-tuple-key---hashmapgrouping-by-criteria",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 2,
      "name": "Array of 26 to String Key",
      "type": "hashmap",
      "application": "grouping-by-criteria",
      "code": "def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n\n        # Note: using a list to build the string key is more efficient than repeatedly appending to a string, \n        # as it avoids the overhead of creating new string objects on each append\n        # list takes O(m) time vs string append which takes O(m^2)\n\n        # space complexity: stores n tuple keys O(n) and lists of original k strings O(k), O(n * k)\n        anaGroup = {}\n\n        # time complexity: iterating over n strings O(n)\n        for word in strs:\n\n            # space complexity: fixed-sized array of 26 lowercase characters O(1)\n            charCount = [0] * 26\n            \n            # time complexity: counting characters for string k length O(k)\n            for char in word:\n                charCount[ord(char) - ord('a')] += 1\n            \n            # time complexity: creating unique char count key from fixed-sized array of 26 O(1)\n            # Using a list to build the key\n            key_parts = []\n            for count in charCount:\n                key_parts.append(str(count))\n                key_parts.append(\"#\")  # Separator\n\n            # Concatenate once at the end\n            key = ''.join(key_parts)\n\n            # time complexity: lookup operation for key O(1)\n            if key not in anaGroup:\n                anaGroup[key] = []  # Initialize list for key if doesn't exist\n            anaGroup[key].append(word)  # Add word to corresponding key group\n\n        # overall: time complexity\n        # overall: space complexity \n        return list(anaGroup.values())",
      "questionNumber": 49,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-2-array-of-26-to-string-key---hashmapgrouping-by-criteria",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ],
  "125": [
    {
      "number": 2,
      "name": "Pre Clean Opposite Ends Comparison",
      "type": "two-pointers",
      "application": "opposite-ends",
      "code": "def isPalindrome(self, s: str) -> bool:\n        \n        # space complexity: cleaned version string of n length O(n)\n        cleaned = []\n\n        # isAlphaNum check using ord()\n        def isAlphaNum(c):\n            return (ord('A') <= ord(c) <= ord('Z') or \n                    ord('a') <= ord(c) <= ord('z') or \n                    ord('0') <= ord(c) <= ord('9'))\n\n        def isUpper(c):\n            return ord('A') <= ord(c) <= ord('Z')\n\n        def toLower(c):\n            return chr(ord(c) + 32)\n\n        # time complexity: iterate over string of n length O(n)\n        for c in s:\n\n            # skip until isAlphaNum char\n            if isAlphaNum(c):\n                \n                # Convert to lowercase char\n                if isUpper(c):\n                    cleaned.append(toLower(c))\n                else:\n                    cleaned.append(c)\n\n        # clean is now lowercase alphaNum\n        # compare using left and right pointers\n        # time complexity: iterate over list of n length O(n)\n        left, right = 0, len(cleaned) - 1\n        while left < right:\n            if cleaned[left] != cleaned[right]:\n                return False\n            left += 1\n            right -= 1\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(n)\n        return True",
      "questionNumber": 125,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-2-pre-clean-opposite-ends-comparison---two-pointersopposite-ends",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "number": 3,
      "name": "In Place Opposite Ends Comparison",
      "type": "two-pointers",
      "application": "opposite-ends",
      "code": "def isPalindrome(self, s: str) -> bool:\n        # space complexity: no additional space used for storage O(1)\n        left, right = 0, len(s) - 1\n\n        # isAlphaNum check using ord()\n        def isAlphaNum(c):\n            return (ord('A') <= ord(c) <= ord('Z') or \n                    ord('a') <= ord(c) <= ord('z') or \n                    ord('0') <= ord(c) <= ord('9'))\n\n        def isUpper(c):\n            return ord('A') <= ord(c) <= ord('Z')\n\n        def toLower(c):\n            return chr(ord(c) + 32)\n\n        # time complexity: iteration over string of n length O(n)\n        while left < right:\n            \n            # time complexity: move left and right to isAlphaNum char O(n)\n            while left < right and not isAlphaNum(s[left]):\n                left += 1\n            while left < right and not isAlphaNum(s[right]):\n                right -= 1\n\n            # Convert left and right to lowercase char\n            leftChar = s[left]\n            rightChar = s[right]\n\n            if isUpper(leftChar):\n                leftChar = toLower(leftChar)\n            if isUpper(rightChar):\n                rightChar = toLower(rightChar)\n\n            # Compare left and right char\n            if leftChar != rightChar:\n                return False\n\n            # move pointers\n            left += 1\n            right -= 1\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(1)\n        return True",
      "questionNumber": 125,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-3-in-place-opposite-ends-comparison---two-pointersopposite-ends",
      "blog": "LeetCode: Two Pointers"
    }
  ],
  "128": [
    {
      "number": 1,
      "name": "HashMap Continent Boundaries",
      "type": "hashmap",
      "application": "representation",
      "code": "def longestConsecutive(nums: List[int]) -> int:\n        \n        # space complexity: hashmap of list of n length O(n)\n        seqLen = defaultdict(int)\n        longest = 0\n\n        # Handle duplicates\n        nums = set(nums)  \n\n        # Iterate over unique numbers\n        for num in nums:\n            # Skip if num is already part of an existing sequence\n            # Fetch lengths of neighboring sequences\n            leftContinentLenFromBoundary = seqLen[num - 1]\n            rightContinentLenFromBoundary = seqLen[num + 1]\n\n            # Calculate new sequence length\n            bridgedLen = 1 + leftContinentLenFromBoundary + rightContinentLenFromBoundary\n\n            # Update new continent boundaries\n            seqLen[num - leftContinentLenFromBoundary] = bridgedLen\n            seqLen[num + rightContinentLenFromBoundary] = bridgedLen\n\n            # Update the global max\n            longest = max(longest, bridgedLen)\n\n        return longest",
      "questionNumber": 128,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-1-hashmap-continent-boundaries---hashmaprepresentation",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 2,
      "name": "Set Rummy Run",
      "type": "hashmap",
      "application": "representation",
      "code": "def longestConsecutive(self, nums: List[int]) -> int: \n    \n    # space complexity: set for list of n length O(n)\n    numSet = set(nums)\n    longest = 0\n\n    # time complexity: iterate over list of n length O(n)\n    for num in numSet:\n\n        # found start of a run\n        # time complexity: lookup operation takes constant O(1)\n        if (num - 1) not in numSet: \n\n            # rummy run until missing an element\n            currLen = 1\n            # time complexity: iterate over m sequence worst case n sequence O(n), lookup O(1), leading to O(n)\n            while (num + currLen) in numSet:\n                currLen += 1 \n\n            # validate with global max sequence\n            longest = max(longest, currLen)\n\n    # overall: time complexity O(n)\n    # overall: space complexity O(n)\n    return longest",
      "questionNumber": 128,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-2-set-rummy-run---hashmaprepresentation",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 3,
      "name": "Union Find Tree",
      "type": "hashmap",
      "application": "algorithm",
      "code": "def longestConsecutive(self, nums: List[int]) -> int:\n        \n        if len(nums) == 0:\n            return 0\n\n        # Union-Find Initialization:\n        \n        # Stores parent of each number\n        # space complexity: hashmap of size n O(n)\n        parent = {}  \n\n        # Stores the size of connected components\n        # space complexity: hashmap of size n O(n)\n        size = {}    \n\n        # Find operation with path compression\n        # time complexity: Amortized O(α(n)) per operation\n        def find(x):\n\n            # if the parent of x is not itself, we have not reached the representative  \n            if parent[x] != x:\n\n                # Path compression\n                # set parent of curr, to parent of parent\n                parent[x] = find(parent[x])\n\n            # return representative of group\n            # either return self\n            # or return parent of parent\n            return parent[x]\n\n        # Union operation with size optimization\n        # time complexity: Amortized O(α(n)) per operation\n        def union(x, y):\n\n            # grab representatives of both x and y\n            rootX = find(x)\n            rootY = find(y)\n\n            # trees are not already connected\n            if rootX != rootY:\n\n                # grab tree sizes\n                xSize = size[rootX]\n                ySize = size[rootY]\n\n                # x tree is larger\n                if ySize < xSize:\n                    # attach smaller tree to larger tree\n                    parent[rootY] = rootX\n                    # add smaller tree size to larger tree\n                    size[rootX] += size[rootY]\n\n                # y tree is larger\n                else:\n                    # attach smaller tree to larger tree\n                    parent[rootX] = rootY\n                    # add smaller tree size to larger tree\n                    size[rootY] += size[rootX]\n\n        # Initialize Union-Find structure: \n        # Set all parents to self\n        # time complexity: iterate over list of n length O(n)\n        for num in nums:\n            if num not in parent:\n                parent[num] = num\n                size[num] = 1\n\n        # Join consecutive numbers: \n        # Union operation on sequences\n        # time complexity: iterate over list of n length O(n)\n        for num in nums:\n            if num + 1 in parent:\n                union(num, num + 1)\n        \n        # return largest group\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(n)\n        return max(size.values())",
      "questionNumber": 128,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-3-union-find-tree---hashmapalgorithm",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ],
  "167": [
    {
      "number": 2,
      "name": "Opposite Ends Pointer Shift by BinarySearch Modification for Target",
      "type": "two-pointers",
      "application": "opposite-ends",
      "code": "def twoSumII(self, numbers: List[int], target: int) -> List[int]:\n\n        # Set up BinarySearch Modification\n        # initialize outer pointers\n        # space complexity: left and right pointers constant O(1)\n        left, right = 0, len(numbers) - 1  \n\n        # BinarySearch Modification\n        # \"<\": working within subarray containing left and right\n        # cannot evaluate num at left == right, breaks constraints of index1 < index2\n        # Base Case: no more array remaining to search, \n        # return []\n        # time complexity: iterate over list of n length O(n)\n        while left < right:\n\n            # grab current sum\n            currSum = numbers[left] + numbers[right]  \n\n            # found target sum\n            if currSum == target:\n                # convert to 1-indexed array, per input/output example\n                return [left + 1, right + 1]\n\n            # \"BinarySearch\" on relevant subsection\n            # update left or right pointer\n            elif currSum < target:\n                left += 1\n            else:\n                right -= 1\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(1)\n        return []",
      "questionNumber": 167,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-2-opposite-ends-pointer-shift-by-binarysearch-modification-for-target---two-pointersopposite-ends",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "number": 1,
      "name": "BinarySearch Per Element for Complement",
      "type": "two-pointers",
      "application": "one-pointer-with-auxiliary-state",
      "code": "def twoSumII(self, numbers: List[int], target: int) -> List[int]:\n        \n        # time complexity: iteration over list of n length O(n)\n        for i in range(len(numbers)): \n\n            # search for complement\n            currComplementSearch = target - numbers[i]\n            \n            # Set up BinarySearch\n            # set new left boundary for iteration BinarySearch\n            # reset right boundary for iteration BinarySearch\n            # given constraint index1 < index2\n            # BinarySearch on right section of array after left element\n            # time complexity: binarySearch O(log n) for each iteration O(n), leading to O(n log n)\n            left, right = i + 1, len(numbers) - 1\n            \n            # BinarySearch\n            # \"<=\": working within subarray [i+1, j] separate from i, \n            # so must evaluate num at left == right, as might be currComplementSearch\n            # Base Case: no more array remaining to search\n            # complement for numbers[i] was not found, continue iteration\n            while left <= right:\n                \n                # middle element\n                midIndex = (left + right) // 2\n                midNum = numbers[midIndex]\n\n                # found target complement\n                if midNum == currComplementSearch:\n                    # convert to 1-indexed array, per input/output example\n                    return [i + 1, midIndex + 1]  \n\n                # \"BinarySearch\" on relevant subsection\n                # update left or right pointer\n                elif midNum < currComplementSearch:\n                    left = midIndex + 1\n                else:\n                    right = midIndex - 1\n\n        # overall: time complexity O(n log n)\n        # overall: space complexity O(1)\n        return []",
      "questionNumber": 167,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-1-binarysearch-per-element-for-complement---two-pointersone-pointer-with-auxiliary-state",
      "blog": "LeetCode: Two Pointers"
    }
  ],
  "217": [
    {
      "number": 1,
      "name": "Hashmap",
      "type": "hashmap",
      "application": "representation",
      "code": "def containsDuplicate(self, nums: List[int]) -> bool:\n\n        # space complexity: dictionary of O(n)\n        count = defaultdict(int)\n\n        # time complexity: iteration over list of n length O(n)\n        for num in nums:\n\n            # time complexity: lookup operation in constant O(1)\n            if count[num] >= 1:\n                return True\n            count[num] += 1\n\n        # overall: time complexity  O(n) \n        # overall: space complexity O(n)\n        return False",
      "questionNumber": 217,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-1-hashmap---hashmaprepresentation",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 2,
      "name": "Hashset",
      "type": "hashmap",
      "application": "representation",
      "code": "def containsDuplicate(self, nums: List[int]) -> bool:\n        \n        # space complexity: hashset of O(n)\n        seen = set()\n\n        # time complexity: iteration of O(n)\n        for n in nums:\n\n            # time complexity: lookup operation of O(1)\n            if n in seen:\n                return True\n            seen.add(n)\n            \n        # overall: time complexity  O(n)\n        # overall: space complexity O(n)\n        return False",
      "questionNumber": 217,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-2-hashset---hashmaprepresentation",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ],
  "238": [
    {
      "number": 1,
      "name": "Prefix and Postfix O(n)",
      "type": "array",
      "application": "in-place-transformations",
      "code": "def productExceptSelf(self, nums: List[int]) -> List[int]:\n        \n        # space complexity: prefix, postfix, and result arrays to calculate and store final value for n integers O(n) = O(3n)\n        prefix = [1] * len(nums)\n        postfix = [1] * len(nums)\n        res = [1] * len(nums)\n\n        # Compute prefix products\n        # time complexity: iteration over list of n length O(n)\n        for i in range(1, len(nums)):\n            \n            # time complexity: lookup + multiplication operations take constant O(1)\n            # (prefix of i) = (prefix of i - 1) * (nums[i - 1])\n            prefix[i] = prefix[i - 1] * nums[i - 1]\n\n        # Compute postfix products\n        # time complexity: iteration over list of n length O(n)\n        for i in range(n - 2, -1, -1):\n\n            # time complexity: lookup + multiplication operations take constant O(1)\n            # (postfix of i) = (postfix of i + 1) * (nums[i + 1])\n            postfix[i] = postfix[i + 1] * nums[i + 1]\n\n        # Combine prefix and postfix products\n        # time complexity: iteration over list of length n O(n)\n        for i in range(n):\n\n            # time complexity: lookup + multiplication operations take constant O(1)\n            # (product except self of i) = (prefix of i) * (postfix of i)\n            res[i] = prefix[i] * postfix[i]\n\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(n)\n        return res",
      "questionNumber": 238,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-1-prefix-and-postfix-o-n---arrayin-place-transformations",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 2,
      "name": "Prefix and Postfix Optimal O(1)",
      "type": "array",
      "application": "in-place-transformations",
      "code": "def productExceptSelf(self, nums: List[int]) -> List[int]:\n        \n        # instantiate to 1, start prefix calculation at res[1], prefix of res[0] is always 1\n        # space complexity: array to store results for n integers O(n) \n        res = [1] * len(nums)\n\n        # Compute prefix products in res\n        # time complexity: iterate over list of size n O(n)\n        for i in range(1, len(nums)):\n\n            # time complexity:\n            # (prefix of i) = (prefix of i - 1) * (num at i - 1)\n            res[i] = res[i - 1] * nums[i - 1]\n\n        # accumulate running postfix through reverse iteration\n        # postfix starts at 1, the postfix of len(n) - 1\n        postfix = 1\n\n        # start iteration at (len(n)-1), postfix of last integer will always be 1\n        # time complexity: iterate over list of size n in reverse O(n)\n        for i in range(len(nums) - 1, -1, -1):\n            \n            # (product except i) = (prefix of i) * (postfix of i)\n            res[i] *= postfix\n            \n            # (postfix of i - 1) = (postfix of i) * (num at i) \n            postfix *= nums[i]\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(1)\n        return res",
      "questionNumber": 238,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-2-prefix-and-postfix-optimal-o-1---arrayin-place-transformations",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ],
  "242": [
    {
      "number": 1,
      "name": "Hashmap",
      "type": "hashmap",
      "application": "representation",
      "code": "def isAnagram(self, s: str, t: str) -> bool:\n        \n        # space complexity: hashmap of 26 elements constant  O(1) \n        count = defaultdict(int)\n\n        # time complexity: iteration over string of n length O(n)\n        for x in s:\n           count[x] += 1\n\n        # time complexity: iteration over string of n length O(n)\n        for x in t:\n           count[x] -= 1\n\n        # time complexity: iteration over string of n length O(n)\n        for value in count.values():\n\n            # time complexity: comparison operation in constant O(1)\n            if value != 0:\n                return False\n\n        # overall: time complexity  O(n)\n        # overall: space complexity O(1)\n        return True",
      "questionNumber": 242,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-1-hashmap---hashmaprepresentation",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 2,
      "name": "Array of 26",
      "type": "hashmap",
      "application": "representation",
      "code": "def isAnagram(self, s: str, t: str) -> bool:\n\n        # note: ord() converts a single uni-code character to its integer representation\n        # int: 97-122 -> lowercase English alphabet (a-z)\n        # we can calculate any char (a-z)'s uni-code integer by subtracting uni-code of 'a'\n        # '(a-z)' - 'a': returns a value of 0-25 which we can index into our array\n        # this simulates a hashing into our array\n\n        # space complexity: array of 26 elements constant O(1)\n        count = [0] * 26\n\n        # time complexity: iteration of O(n)\n        for x in s:\n           count[ord(x) - ord('a')] += 1\n\n        # time complexity: iteration of O(n)\n        for x in t:\n           count[ord(x) - ord('a')] -= 1\n\n        # time complexity: iteration of O(n)\n        for value in count:\n\n            # time complexity: comparison of O(1)\n            if value != 0:\n                return False\n\n        # overall: time complexity: O(n)\n        # overall: space complexity O(1)\n        return True",
      "questionNumber": 242,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-2-array-of-26---hashmaprepresentation",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ],
  "271": [
    {
      "number": 1,
      "name": "Splicing Delimiter with Catchup 2 pointers",
      "type": "two-pointers",
      "application": "catchup",
      "code": "def encode(self, strs: List[str]) -> str:\n\n        # Note: python strings are immutable so concatenation with += \"\" \n        # python creates new string time complexity o(n^2)\n        # python list .append() modifies list in place by adding a single\n        # element at end in O(1) operation\n        # so doing .append() with a \"\".join() at the end is more efficient  \n\n        # space complexity: for n strings O(n) store n characters O(n), leading to O(n^2)\n        encoded = []\n\n        # time complexity: iterate over list of n strings O(n)\n        for s in strs:\n            \n            # lenDelim = len + delim\n            lenDelim = str(len(s)) + \"#\"\n\n            # append length and delimiter \"5#\"\n            left = 0\n            while left < len(lenDelim):\n                encoded.append(lenDelim[left])\n                left += 1\n            \n            # append string itself\n            # time complexity: iterate over string of n length O(n), for n iterations, leading to O(n^2)\n            left = 0\n            while left < len(s):\n                encoded.append(s[left])\n                left += 1\n        \n        # overall: time complexity O(n^2)\n        # overall: space complexity O(n^2)\n        return ''.join(encoded)\n\n\n    def decode(self, encoded: str) -> List[str]:\n\n        # space complexity: list of n strings O(n) each of n length O(n), leading to O(n^2)\n        decoded = []\n        left = 0\n\n        # time complexity: iterate over representation of n strings O(n) each of n length O(n), leading to O(n^2)\n        while left < len(encoded):\n\n            # update right pointer to start of next (delim + string) group\n            right = left\n\n            # grab length before delimiter\n            while encoded[right] != \"#\":\n                right += 1\n            # right is now pointing at delim\n            # [ 2 # h i ... ]\n            #   ^ ^\n            #   l r \n\n            # splicing the length of the string\n            length = int(encoded[left:right])\n\n            right += 1\n            # skip delimiter, point to start of string\n            # [ 2 # h i ... ]\n            #   ^   ^\n            #   l   r \n\n            # time complexity: splice over string n length O(n) for n iterations O(n), leading to O(n^2)\n            decoded.append(encoded[right:right + length])\n            # splicing the string of 'length' characters\n            # [ 2 # h i 4 # ...]\n            # [ 0 1 2 3 4 5 6 ...]\n            #   ^   ^   ^\n            #   l   r   r'\n            # 2 + 2 = 4, start of length in next delimiter group\n\n            left = right + length\n            # left pointing to start of next len\n            # [ 2 # h i 4 # ...]\n            # [ 0 1 2 3 4 5 6 ...]\n            #       ^   ^\n            #       r   l\n\n        # overall: time complexity O(n^2)\n        # overall: space complexity O(n^2)\n        return decoded",
      "questionNumber": 271,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-1-splicing-delimiter-with-catchup-2-pointers---two-pointerscatchup",
      "blog": "LeetCode: Two Pointers"
    },
    {
      "number": 2,
      "name": "Base 10 Auxiliary Length Delimiter with 1 pointer",
      "type": "two-pointers",
      "application": "one-pointer-with-auxiliary-state",
      "code": "def encode(self, strs: List[str]) -> str:\n\n        # Note: python strings are immutable so concatenation with += \"\" \n        # python creates new string time complexity o(n^2)\n        # python list .append() modifies list in place by adding a single\n        # element at end in O(1) operation\n        # so doing .append() with a \"\".join() at the end is more efficient  \n\n        # space complexity: for n strings O(n) store n characters O(n), leading to O(n^2)\n        encoded = []\n\n        # time complexity: iterate over list of strings n length O(n)\n        for s in strs:\n            \n            # lenDelim = len + delim\n            lenDelim = str(len(s)) + \"#\"\n\n            # append length and delimiter \"5#\"\n            left = 0\n            while left < len(lenDelim):\n                encoded.append(lenDelim[left])\n                left += 1\n            \n            # append string itself\n            # time complexity: iterate over string of n length O(n), for n iterations, leading to O(n^2)\n            left = 0\n            while left < len(s):\n                encoded.append(s[left])\n                left += 1\n        \n        # overall: time complexity O(n^2)\n        # overall: space complexity O(n^2)\n        return ''.join(encoded)\n\n\n    def decode(self, encoded: str) -> List[str]:\n\n        # space complexity: list of n strings O(n) each of n length O(n), leading to O(n^2)\n        decoded = []\n        left = 0\n\n        # time complexity: iterate over representation of n strings O(n) each of n length O(n), leading to O(n^2)\n        while left < len(encoded):\n\n            # grab length prefix behind \"#\" delimiter\n            currLen = 0\n            while encoded[left] != \"#\":\n\n                # grabbing value while calculating base 10 of prev\n                currLen = currLen * 10 + int(encoded[left]) \n                left += 1\n\n            # skip delimiter, point to start of string\n            left += 1  \n\n            # extract substring of 'currLen' characters\n            # time complexity: iterate over string n length O(n) for n iterations O(n), leading to O(n^2)\n            substring = []\n            for _ in range(currLen):\n\n                # forming string\n                substring.append(encoded[left])\n                left += 1\n            \n            # left is pointing to start of next len\n\n            # add string to decoded list of strings\n            decoded.append(''.join(substring))\n\n\n        # overall: time complexity O(n^2)\n        # overall: space complexity O(n^2)\n        return decoded",
      "questionNumber": 271,
      "solutionLink": "/Notes/leetcode-two-pointers#solution-2-base-10-auxiliary-length-delimiter-with-1-pointer---two-pointersone-pointer-with-auxiliary-state",
      "blog": "LeetCode: Two Pointers"
    }
  ],
  "347": [
    {
      "number": 1,
      "name": "MaxHeap Track N Elements",
      "type": "hashmap",
      "application": "algorithm",
      "code": "def topKFrequent(self, nums: List[int], k:int) -> List[int]:\n\n        # Note: A heap only guarantees that the root is the max (max heap) or min (min heap).\n        # The heap data structure only allows removing the root efficiently (O(log n))\n        # The heap property says nothing about the relative order of leaves or internal nodes.\n        # The smallest element could be anywhere in the leaves or internal nodes, not necessarily a leaf.\n        # Thus for maxHeap, we need to add all of the elements to the tree\n        # since we can't removed the smallest leaf as we go\n\n        # space complexity: count for m unique elements worst case n elements O(n)\n        count = defaultdict(int)\n\n        # time complexity: iterate over list of n length O(n)\n        for num in nums:\n            count[num] += 1\n\n        # space complexity: maxHeap must store all n elements O(n)\n        maxHeap = []\n\n        # time complexity: iteate over m unique elements worst case over n elements O(n)\n        for num, freq in count.items():\n\n            # time complexity: push onto heap O(log m) worst case O(log n) leading to best case O(m log m) worst case O(n log n) \n            heapq.heappush(maxHeap, (-freq, num))\n\n        # space complexity: list of k elements worst case n elements best O(k) worst O(n)\n        result = []\n\n        # cannot iterate over array, as order is not guaranteed left to right\n        # time complexity: iterate for k elements worst case n elements best O(k) worst O(n)\n        for _ in range(k):\n\n            # time complexity: pop top element O(log n) for k elements, worst case O(log n) for n elements, best case O(k log n) worst O(n log n)\n            freq, num = heapq.heappop(maxHeap)\n            result.append(num)\n\n        # same as above\n        # res = [num for _, num in (heapq.heappop(maxHeap) for _ in range(k))]\n\n        # overall: time complexity O(n log n)\n        # overall: space complexity O(n)\n        return result",
      "questionNumber": 347,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-1-maxheap-track-n-elements---hashmapalgorithm",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 2,
      "name": "MinHeap Track K Elements",
      "type": "hashmap",
      "application": "algorithm",
      "code": "def topKFrequent(self, nums: List[int], k:int) -> List[int]:\n\n        # Note: A heap only guarantees that the root is the min (min heap) or max (max heap).\n        # The heap data structure only allows removing the root efficiently (O(log n))\n        # The heap property says nothing about the relative order of leaves or internal nodes.\n        # The largest element could be anywhere in the leaves or internal nodes, not necessarily a leaf.\n        # Thus for a minHeap, the root always holds the smallest element.\n        # If we only remove the smallest element when heap as exceeded size k, \n        # the heap will always contains the k largest frequencies seen so far.\n\n        # space complexity: count for m unique elements worst case n elements O(n)\n        count = defaultdict(int)\n\n        # time complexity: iterate over list of n length O(n)\n        for num in nums: \n            count[num] += 1\n\n        # space complexity: minHeap tracks k elements O(k)\n        minHeap = []\n\n        # time complexity: worst case iterate over n unique elements O(n)\n        for num, freq in count.items(): \n\n            # time complexity: push onto heap O(log n) for n elements, leading to O(n log n) \n            heapq.heappush(minHeap, (freq, num)) \n            \n            # if heap grows to size k + 1\n            if len(minHeap) > k:\n\n                # pop smallest element, heap will be back to size k\n                # time complexity: # pop smallest O(log k) for worst case n elements, leading to O(n log k)\n                heapq.heappop(minHeap) \n        \n        # can iterate over heap array as only holding top k elements\n        # time complexity: grab all k elements from minHeap worst case grab n elements O(n)\n        result = [num for freq, num in minHeap]\n\n        # for _, num in minHeap:\n        #    result.append(num) \n        # same as above\n\n        # overall: time complexity O(n log n)\n        # overall: space complexity O(n)\n        return result",
      "questionNumber": 347,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-2-minheap-track-k-elements---hashmapalgorithm",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 3,
      "name": "Descending QuickSelect BinarySearch",
      "type": "hashmap",
      "application": "algorithm",
      "code": "def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n    \n        # Note: QuickSelect is a modified quicksort\n        # Once the finalPartitionMarker is placed in its correct position, \n        # elements to the left and right are guaranteed to be smaller/larger\n        # This avoids sorting the entire array and isolates the elements we need\n\n        # In-place partition of array based on pivot value\n        def partitionSection(left, right, randPivotElemIndex):\n            \n            # time complexity: partition processes m elements, n in worst case O(n)\n            # Frequency of pivot element\n            pivotElemFreq = frequency[unique[randPivotElemIndex]]\n\n            # Move pivot to end\n            # tuple unpacking in python, allows to swap two variables in a single line\n            unique[randPivotElemIndex], unique[right] = unique[right], unique[randPivotElemIndex]\n            \n            # Index to partition larger elements to the left side of the section\n            partitionIndex = left\n\n            # Partition elements with freq more than pivotElemFreq to left\n            # time complexity: iterates over unique elements between left and right segment O(m)\n            for i in range(left, right):\n\n                # Higher frequency -> \"greater\"\n                if pivotElemFreq < frequency[unique[i]]:  \n\n                    # swap larger element to left, sorting high to low\n                    unique[i], unique[partitionIndex] = unique[partitionIndex], unique[i]\n                    partitionIndex += 1\n\n            # swap pivot to its final correct partitioned index\n            # now elements to the right and left follow the conditions according to pivot element\n            unique[partitionIndex], unique[right] = unique[right], unique[partitionIndex]\n            return partitionIndex\n\n        # time complexity: average recursion depth O(log m)\n        # space complexity: recursion stack for in place partitioning on average O(log m)\n        def quickSelectBinarySearchHelper(left, right, finalPartitionMarker):\n            \n            # Base Case: see 'For descending' below\n            if left == right:\n                return\n\n            # Randomly choose a pivot index\n            # differs from QuickSort \"median-of-three\" approach\n            # random pivot is focused on finding the k-th smallest or largest\n            # rather than fully sorting the array, random pivot avoids degrading to worst case O(n^2)\n            randPivotElemIndex = random.randint(left, right)\n\n            # Partition the array\n            resultPivotElemIndex = partitionSection(left, right, randPivotElemIndex)\n            \n            # Base Case: see 'For descending' below\n            if finalPartitionMarker == resultPivotElemIndex:\n                return \n            \n            # Binary Search Modification:\n            # Selects next partition pivot\n            # Recursively QuickSelect on partitioned section (left or right)\n            # where finalPartitionMarker belongs to\n\n            # finalPartitionMarker is in the left partition of resultPivotElemIndex\n            elif finalPartitionMarker < resultPivotElemIndex:\n                quickSelectBinarySearchHelper(left, resultPivotElemIndex - 1, finalPartitionMarker)\n            \n            # finalPartitionMarker is in the right partition of resultPivotElemIndex\n            else:\n                quickSelectBinarySearchHelper(resultPivotElemIndex + 1, right, finalPartitionMarker)\n\n        # time complexity: iterate over list of n length O(n)\n        frequency = defaultdict(int)\n        for num in nums:\n            frequency[num] += 1\n\n        # QuickSelect BinarySearch to find the k most frequent elements\n        unique = list(frequency.keys())\n        n = len(unique)\n        finalPartition = k - 1\n        l, r = 0, n - 1\n\n        # For descending:\n        # say we have a list of 6 elements, we are trying to grab the largest 2 elements\n        # if we do 2 - 1 we get 1.\n        # so if we find we have partitioned and set index 1\n        # we know that the elements 0 and 1 are the 2 largest elements\n        # so we splice [:2] = [0, 1]\n        quickSelectBinarySearchHelper(l, r, finalPartition)\n\n        # overall: time complexity\n        # overall: space complexity \n        return unique[:k]",
      "questionNumber": 347,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-3-descending-quickselect-binarysearch---hashmapalgorithm",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 4,
      "name": "Ascending QuickSelect BinarySearch",
      "type": "hashmap",
      "application": "algorithm",
      "code": "def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n\n        # Note: QuickSelect is a modified quicksort\n        # Once the finalPartitionMarker is placed in its correct position, \n        # elements to the left and right are guaranteed to be smaller/larger\n        # This avoids sorting the entire array and isolates the elements we need\n\n        # In-place partition of array based on pivot frequency (low to high sorting)\n        def partitionSection(left, right, randPivotElemIndex):\n            \n            # Frequency of pivot element\n            pivotElemFreq = frequency[unique[randPivotElemIndex]]\n\n            # Move pivot to end\n            # tuple unpacking in python, allows to swap two variables in a single line\n            unique[randPivotElemIndex], unique[right] = unique[right], unique[randPivotElemIndex]\n            \n            # Index to place smaller elements\n            partitionIndex = left\n\n            # Partition elements with freq less than pivotElemFreq to left\n            # time complexity: iterates over unique elements between left and right segment O(m)\n            for i in range(left, right):\n\n                # Lower frequency -> \"lower\"\n                if frequency[unique[i]] < pivotElemFreq:\n\n                    # swap larger element\n                    unique[i], unique[partitionIndex] = unique[partitionIndex], unique[i]\n                    partitionIndex += 1\n\n            # swap pivot to its final correct partitioned index\n            # now elements to the right and left follow the conditions according to pivot element\n            unique[partitionIndex], unique[right] = unique[right], unique[partitionIndex]\n            return partitionIndex\n\n        # QuickSelect helper for low to high sorting\n        # Avg recursion depth: O(log m), space: O(log m)\n        def quickSelectBinarySearchHelper(left, right, finalPartitionMarker):\n            \n            # Base Case: see 'For ascending' below\n            if left == right:\n                return\n\n            # Randomly choose a pivot index\n            # differs from QuickSort \"median-of-three\" approach\n            # random pivot is focused on finding the k-th smallest or largest\n            # rather than fully sorting the array, random pivot avoids degrading to worst case O(n^2)\n            partitionElemIndex = random.randint(left, right)\n            \n            # Partition the array\n            finalPartitionElemIndex = partitionPivot(left, right, partitionElemIndex)\n\n            # Base Case: see 'For ascending' below\n            if finalPartitionMarker == finalPartitionElemIndex:\n                return\n\n            # Binary Search Modification:\n            # Selects next partition pivot\n            # Recursively QuickSelect on partitioned section (left or right)\n            # where finalPartitionMarker belongs to\n\n            # finalPartitionMarker is in the left partition of resultPivotElemIndex\n            elif finalPartitionMarker < finalPartitionElemIndex:\n                quickSelectBinarySearchHelper(left, finalPartitionElemIndex - 1, finalPartitionMarker)\n            \n            # finalPartitionMarker is in the right partition of resultPivotElemIndex\n            else:\n                quickSelectBinarySearchHelper(finalPartitionElemIndex + 1, right, finalPartitionMarker)\n\n        # time complexity: iterate over list of n length O(n)        \n        frequency = defaultdict(int)\n        for num in nums:\n            frequency[num] += 1\n\n        # Quickselect to find the k most frequent elements\n        unique = list(frequency.keys())\n        n = len(unique)\n        finalPartition = n - k\n        l, r = 0, n - 1\n\n        # For ascending:\n        # say we have a list of 6 elements, we are trying to grab the largest 2 elements\n        # if we do 6 - 2 we get 4.\n        # so if we find we have partitioned and set index 4\n        # we know that the elements 4 and 5 are the 2 largest elements\n        # so we splice [6-2:] = [4:] = [4, 5]\n        # quickSelectBinarySearchHelper(left, right, finalPartitionMarker)\n        quickSelectBinarySearchHelper(l, r, finalPartition)\n\n        # overall: time complexity\n        # overall: space complexity\n        return unique[n - k:]",
      "questionNumber": 347,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-4-ascending-quickselect-binarysearch---hashmapalgorithm",
      "blog": "LeetCode: Arrays and Hashing"
    },
    {
      "number": 5,
      "name": "BucketSort by Count",
      "type": "hashmap",
      "application": "algorithm",
      "code": "def topKFrequent(self, nums: List[int], k:int) -> List[int]:\n            \n        # space complexity: frequency count for unique integers O(m) \n        # time complexity: iterate over list of n integers O(n)\n        count = defaultdict(int)\n        for key in nums:\n\n            # time complexity: insertion operation takes constant O(1)\n            count[key] += 1\n\n        # numBuckets equal to length to account for max possible frequency count\n        # the case where list is full of only 1 element O(n)\n        # + 1 for case of element with 1 list, need bucket of frequency 0 and bucket of frequency 1\n        numBuckets = len(nums) + 1\n\n        # below is saying: create a list of empty lists numBuckets amount of times \n        # time complexity: iterating to set empty list for each bucket\n        # space complexity: creating O(n) bucket lists\n        freqBuckets = [[] for i in range(numBuckets)]\n\n        # time complexity: iterate over frequency list for m unique integer tuples (int, occurrences) O(m) \n        for int, occurrences in count.items():\n\n            # time complexity: insert operation takes constant O(1)\n            freqBuckets[occurrences].append(int)\n\n        # space complexity: grabbing top k integers O(k)\n        res = []\n\n        # time complexity: iterate over n buckets O(n)\n        for i in range(len(freqBuckets) - 1, 0, -1):\n            \n            # time complexity: iterate over all entries in current bucket O(n)\n            for num in freqBuckets[i]:\n                \n                # time complexity: insert operation takes constant O(1)\n                res.append(num)\n                \n                # time complexity: continue while less than k integers have been grabbed O(k)\n                if len(res) == k:\n                    return res\n\n        # overall: time complexity O(n)\n        # overall: space complexity O(n)\n        return res",
      "questionNumber": 347,
      "solutionLink": "/Notes/leetcode-arrays-and-hashing#solution-5-bucketsort-by-count---hashmapalgorithm",
      "blog": "LeetCode: Arrays and Hashing"
    }
  ]
}